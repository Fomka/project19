*&---------------------------------------------------------------------*
*& Report  ZPMP001
*&
*&---------------------------------------------------------------------*
*&   Программа для ведения базы данных по программному обеспечению, входящему
*& в состав автоматизированных систем управления технологическим процессом
*& (АСУТП) и средств измерения (СИ).
*&
*----------------------------------------------------------------------------
*  Префиксы в названиях
*    g = global, глобальное объявление (не используется в подпрограммах)
*    l = local, локальное объявление
*
*    t = table, таблица
*    s = structure, структура
*    v = value, переменная
*    c = constant, константа
*    f = field-symbol, указатель
*
*    i = input, входной параметр
*    o = output, выходной параметр
*
*    ty_  = type, тип
*    ty_s = type of structure, тип структуры
*    ty_t = type of table, тип таблицы
*--------------------------------------------------------------------*
Report  ZPMP001.

Constants:
  gc_true type boolean value 'X',
  gc_false type boolean value ' ',
  begin of gc_version,
    major type n length 1 value '0',
    minor type n length 2 value '19',
  end of gc_version,
  begin of gcs,
    icon_delete type iconname value '@B_DELE@', "Метод cl_icon->get_icon для 'ICON_DELETE'
    begin of permission_string,
      create type ZPM_USR-OPERATION value 'CREATE',
      change type ZPM_USR-OPERATION value 'CHANGE',
      view type ZPM_USR-OPERATION value 'VIEW',
      delete type ZPM_USR-OPERATION value 'DELETE',
      all type ZPM_USR-OPERATION value 'ALL',
    end of permission_string,
    begin of commands,
      "Общие для всех экранов
      help type sy-ucomm value 'HELP',
      version type sy-ucomm value 'VERSION',
      begin of sel_screen, "Для экрана выбора
        goto_new type sy-ucomm value 'GOTO_NEW', "Изменил? Ищи user-command goto_new
        goto_change type sy-ucomm value 'GOTO_CHANGE', "Изменил? Ищи user-command goto_change
        goto_view type sy-ucomm value 'GOTO_VIEW', "Изменил? Ищи user-command goto_view
        online type sy-ucomm value 'ONLI',
      end of sel_screen,
      begin of change_screen,
        save type sy-ucomm value 'SAVE',
      end of change_screen,
      begin of new_screen,
        save type sy-ucomm value 'SAVE',
      end of new_screen,
    end of commands,
    begin of screens,
      status type gui_status value '0001', "Статус по умолчанию
      begin of data_new, "Экран для ввода новых записей
        number type i value 10,
        title type gui_title value '0010',
      end of data_new,
      begin of data_change, "Экран для изменения и ввода записей
        number type i value 20,
        title type gui_title value '0020',
      end of data_change,
      begin of data_view, "Экран для просмотра
        number type i value 30,
        title type gui_title value '0030',
      end of data_view,
      begin of sel_screen,
        number type i value 1000,
        group_create type screen-group1 value 'CRE',"Изменил? Ищи modif id CRE
        group_change type screen-group1 value 'CHA',"Изменил? Ищи modif id CHA
      end of sel_screen,
    end of screens,
    begin of alv, "общее для гридов (ALV-Grid)
      begin of variant_save_modes,
        only_user type c length 1 value 'U', "Сохранять вариант только для пользователя
        only_global type c length 1 value 'X',  "только глобально — 'X'
        all type c length 1 value 'A',          "обоими способами — 'A'
      end of variant_save_modes,
      begin of stable_refresh, "при обновлении грида не сдвигать полосу прокрутки по ...
        row type lvc_s_stbl-row value gc_true, "... вертикали
        col type lvc_s_stbl-col value gc_true, "... горизонтали
      end of stable_refresh,
    end of alv,
    begin of data_table,
      table_name type TABNAME value 'ZPMP001_1',
      key_mandt type NAME_FELD value 'MANDT',
      key_unique_index type NAME_FELD value 'UNIQUE_INDEX',
      stort type NAME_FELD value 'STORT',
      name type NAME_FELD value 'NAME',
      manufact_place type NAME_FELD value 'MANUFACT_PLACE',
      manufact_name type NAME_FELD value 'MANUFACT_NAME',
      date_start type NAME_FELD value 'DATE_START',
      project type NAME_FELD value 'PROJECT',
      type type NAME_FELD value 'TYPE',
      version_origianl type NAME_FELD value 'VERSION_ORIGINAL',
      version_mod type NAME_FELD value 'VERSION_MOD',
      dev_environment type NAME_FELD value 'DEV_ENVIRONMENT',
      mod_cause type NAME_FELD value 'MOD_CAUSE',
      mod_worker type NAME_FELD value 'MOD_WORKER',
      mod_date type NAME_FELD value 'MOD_DATE',
      num_of_copies type NAME_FELD value 'NUM_OF_COPIES',
      commentary type NAME_FELD value 'COMMENTARY',
    end of data_table,
  end of gcs.

*&-------------------------------------------------------------------*
*& Обработчик событий для всех типов ALV-гридов, объявление
*&-------------------------------------------------------------------*
Class lcl_grid_event_handler definition final.
  Public section.
    Methods:
      handle_hotspot_click
        for event hotspot_click of cl_gui_alv_grid
          importing sender e_column_id es_row_no,
      handle_data_changed
        for event data_changed of cl_gui_alv_grid
          importing sender er_data_changed.
  Private section.
    "Пусто
Endclass.

Types:
  ty_t_data type ZPMP001_1_TABLE_TYPE,
  ty_s_data type line of ty_t_data,
  begin of ty_s_alv,
    begin of 01,
      r_grid type ref to cl_gui_alv_grid,
      r_handler type ref to lcl_grid_event_handler,
      r_cont type ref to cl_gui_docking_container,
      t_fcat type lvc_t_fcat,
      t_sort type lvc_t_sort,
      t_excl type ui_functions,
      s_layo type lvc_s_layo,
      s_vari type disvariant,
    end of 01,
  end of ty_s_alv.

Data:
  gt_data type ty_t_data,
  gt_data_before type ty_t_data, "Состояние gt_data при переходе на экран изменений
  gv_row_count type i,
  begin of gs_permissions,
    create type boolean value gc_false,
    change type boolean value gc_false,
    view type boolean value gc_false,
    delete type boolean value gc_false,
    all type boolean value gc_false,
  end of gs_permissions,
  gs_alv type ty_s_alv.


*&-------------------------------------------------------------------*
*& Обработчик событий для всех типов ALV-гридов, реализация
*&-------------------------------------------------------------------*
Class lcl_grid_event_handler implementation.
  Method handle_hotspot_click.
    "Переключение между гридами
    Case sender.
      When gs_alv-01-r_grid.
        Message i000(SU) with 'Событие hotspot_click' 'не обрабатывается для этого ALV-Grid''а'.
      When others.
        Message i000(SU) with 'Событие hotspot_click' 'не обрабатывается для этого ALV-Grid''а'.
    Endcase.
  Endmethod.
  Method handle_data_changed.
    Case sender.
      When gs_alv-01-r_grid.
        "Использовать экземпляр класса, передаваемый через сообщение
        Perform alv_1_handle_data_changed
          using er_data_changed
          changing gt_data.
      When others.
        Message i000(SU) with 'Событие data_changed' 'не обрабатывается для этого ALV-Grid''а'.
    Endcase.
  Endmethod.
Endclass.


Tables:
  ZPMP001_1.

Selection-screen pushbutton /1(40) text-001 user-command goto_new modif id CRE. "Добавить
Selection-screen begin of block b10 with frame title text-010.
  Select-options:
    so1_strt for ZPMP001_1-STORT,
    so1_name for ZPMP001_1-NAME,
    so1_man1 for ZPMP001_1-MANUFACT_PLACE,
    so1_man2 for ZPMP001_1-MANUFACT_NAME,
    so1_proj for ZPMP001_1-PROJECT,
    so1_date for ZPMP001_1-DATE_START.
Selection-screen end of block b10.
Selection-screen begin of block b20 with frame title text-020.
  Select-options:
    so2_type for ZPMP001_1-TYPE,
    so2_vero for ZPMP001_1-VERSION_ORIGINAL,
    so2_verm for ZPMP001_1-VERSION_MOD,
    so2_denv for ZPMP001_1-DEV_ENVIRONMENT,
    so2_mcau for ZPMP001_1-MOD_CAUSE,
    so2_mwor for ZPMP001_1-MOD_WORKER,
    so2_mdat for ZPMP001_1-MOD_DATE,
    so2_numc for ZPMP001_1-NUM_OF_COPIES default 1.
Selection-screen end of block b20.
Select-options:
  so3_comm for ZPMP001_1-COMMENTARY.
Selection-screen pushbutton /1(40) text-002 user-command goto_change modif id CHA. "Изменить
Selection-screen pushbutton /1(40) text-003 user-command goto_view. "Просмотреть

Initialization.
  gs_permissions-view = gc_true. "Нет проверки полномочий на просмотр — смотрят все
  Perform check_permission
    using sy-repid sy-uname gcs-permission_string-change gcs-permission_string-all
    changing gs_permissions-change.
  Perform check_permission
    using sy-repid sy-uname gcs-permission_string-create gcs-permission_string-all
    changing gs_permissions-create.
  Perform check_permission
    using sy-repid sy-uname gcs-permission_string-delete gcs-permission_string-all
    changing gs_permissions-delete.
  Perform check_permission
    using sy-repid sy-uname gcs-permission_string-all gcs-permission_string-all
    changing gs_permissions-all.
  "Не пускать, если нет ни полномочий на VIEW, ни на любое другое действие
  If gs_permissions-view   = gc_false and gs_permissions-change = gc_false and
     gs_permissions-create = gc_false and gs_permissions-delete = gc_false.

    "Сообщение типа E в событии Initialization равнозначно выходу из программы
    Message e000(SU) with 'У пользователя'
                          sy-uname
                          'недостаточно полномочий на работу с программой'
                          sy-repid.
  Endif.

  If gs_permissions-create <> gc_true.
    Perform hide_screen_element_group using gcs-screens-sel_screen-group_create.
  Endif.
  If gs_permissions-change <> gc_true.
    Perform hide_screen_element_group using gcs-screens-sel_screen-group_change.
  Endif.

*--- Реакция на нажатие кнопок на экране выбора ------------------------------*
At selection-screen.
  Perform dispatch_user_command using sy-dynnr changing sy-ucomm.

*--- Нажатие "Выполнить" (F8) на экране выбора (sy-ucomm = 'ONLI') -----------*
Start-of-selection.
  Perform get_data changing gt_data gv_row_count.
  If gv_row_count = 0. "Обработать результат выборки из БД, вхождение 1 из 3
    Message i000(SU) with 'Не найдено ни одной записи'.
    Exit.
  Else.
    Message s000(SU) with 'Записей найдено:' gv_row_count 'шт.'.
  Endif.


*--- Выборка из базы данных завершена ----------------------------------------*
End-of-selection.
  Call screen gcs-screens-data_view-number.


*--- Экранные модули, начало -------------------------------------------------*
Module init_screen output. "Общий для всех экранов — установить GUI-статус
  Set pf-status gcs-screens-status. "Установить минимальный набор функций
  "Инициировать экземпляр ALV-Grid'а и заголовок, соответствующие текущему экрану
  Case sy-dynnr.
    When gcs-screens-data_new-number.
      Set titlebar gcs-screens-data_new-title.
      Message s000(SU) with 'Отображение ALV-Grid''а на экране' sy-dynnr 'не сделано'.

    When gcs-screens-data_change-number.
      Set titlebar gcs-screens-data_change-title.
      Perform alv_1_display using gs_permissions-all changing gt_data gs_alv-01.
      Call method gs_alv-01-r_grid->set_ready_for_input
        exporting
          i_ready_for_input = 1
          .
      Move gt_data to gt_data_before. "Запомнить содержимое до изменений, 1 из 2

    When gcs-screens-data_view-number.
      Set titlebar gcs-screens-data_view-title.
      Perform alv_1_display using gs_permissions-all changing gt_data gs_alv-01.
      Call method gs_alv-01-r_grid->set_ready_for_input
        exporting
          i_ready_for_input = 0
          .

    When others.
      Message i000(SU) with 'Отображение ALV-Grid''а на экране' sy-dynnr 'не сделано'.
  Endcase.
Endmodule. "init_screen

Module dispatch_user_command input.
  Perform dispatch_user_command using sy-dynnr changing sy-ucomm.
Endmodule. "dispatch_user_command

Module exit_screen input. "Общий для всех экранов — обработать команду выхода
  Perform exit_screen using sy-dynnr.
Endmodule. "exit_screen
*--- Экранные модули, конец --------------------------------------------------*

*&-------------------------------------------------------------------*
*&   Общая обработка команд от пользователя на всех экранах
*&-------------------------------------------------------------------*
Form dispatch_user_command
  using
    iv_dynnr type sy-dynnr
  changing
    ov_ucomm type sy-ucomm.

  Data: lv_ucomm type sy-ucomm.

  lv_ucomm = ov_ucomm. "ov_ucomm очищается при успешном завершении подпрограммы

  If lv_ucomm is initial.
    Exit.
  Endif.

  "Искать команду в списке команд, общих для всех экранов.
  "Если найдена — обработать и выйти из этой подпрограммы.
  Case lv_ucomm.
    When gcs-commands-help.
      Perform show_help.
      Exit.
    When gcs-commands-version.
      Perform show_version using gc_version.
      Exit.
    When others.
      "Команда не найдена в списке команд, общих для всех экранов.
      "Продолжить поиск.
  Endcase.

  "Искать команду в списке команд, специфичных для указанного экрана
  Case iv_dynnr.
    "Команды на экране выбора
    When gcs-screens-sel_screen-number.

      Case lv_ucomm.

        When gcs-commands-sel_screen-goto_new.
          Call screen gcs-screens-data_new-number.

        When gcs-commands-sel_screen-goto_change.
          Perform get_data changing gt_data gv_row_count.
          If gv_row_count = 0. "Обработать результат выборки из БД, вхождение 2 из 3
            Message i000(SU) with 'Не найдено ни одной записи'.
            Exit.
          Else.
            Message s000(SU) with 'Записей найдено:' gv_row_count 'шт.'.
          Endif.

          Call screen gcs-screens-data_change-number.

        When gcs-commands-sel_screen-goto_view.
          Perform get_data changing gt_data gv_row_count.
          If gv_row_count = 0. "Обработать результат выборки из БД, вхождение 2 из 3
            Message i000(SU) with 'Не найдено ни одной записи'.
            Exit.
          Else.
            Message s000(SU) with 'Записей найдено:' gv_row_count 'шт.'.
          Endif.
          Call screen gcs-screens-data_view-number.

        When gcs-commands-sel_screen-online. "Нажатие "Выполнить" (F8) на экране выбора
          "ничего не делать, обработка находится в событии Start-of-selection

        When others. "Команда не найдена в списке обрабатываемых
          "Ничего не делать = стандартные команды на экране выбора и так обрабатываются
          Exit.

      Endcase.

    When gcs-screens-data_change-number.
      Case lv_ucomm.
        When gcs-commands-change_screen-save.
          Perform save_data
            using gs_alv-01
            changing gt_data_before
                     gt_data.
        When others. "Команда не найдена в списке обрабатываемых
          Message i000(SU) with 'На экране' iv_dynnr 'не обрабатывается команда' lv_ucomm.
      Endcase.

    "Команды на остальных экранах = на экране со списком ЕО
    When others.
      Message i000(SU) with 'На экране' iv_dynnr 'не обрабатывается команда' lv_ucomm.
  Endcase.

  Clear ov_ucomm. "ov_ucomm очищается при успешном завершении подпрограммы
Endform. "dispatch_user_command

*&-------------------------------------------------------------------*
*&   Показать справку по программе (сейчас это список скрытых команд)
*&-------------------------------------------------------------------*
Form show_help.
  Message i000(SU) with 'Скрытые команды: HELP, VERSION'.
Endform. "show_help

*&-------------------------------------------------------------------*
*&   Показать информацию о версии программы (инф. берётся из констант)
*&-------------------------------------------------------------------*
Form show_version using ic_version like gc_version.
  Data:
    lv_message type string,
    lv_changed_date type TRDIR-UDAT,
    lv_date_string type c length 10,
    lv_changed_by type TRDIR-UNAM,
    lv_substring type string.

  Move sy-title to lv_message.
  Concatenate lv_message ', версия '
              ic_version-major '.' ic_version-minor
    into lv_message respecting blanks.

  Select single UDAT UNAM
    from TRDIR
    into (lv_changed_date, lv_changed_by)
    where NAME = sy-repid.
  If sy-subrc <> 0.
    lv_substring = 'Последнее изменение неизвестно (таблица TRDIR).'.
  Else.
    Write lv_changed_date to lv_date_string.
    Concatenate 'Последнее изменение сделано' lv_date_string
                'пользователем' lv_changed_by
      into lv_substring separated by space.
  Endif.

  Concatenate lv_message lv_substring
    into lv_message separated by '. '.
  Message lv_message type 'I'.
Endform. "show_version

*&-------------------------------------------------------------------*
*&   Уничтожить объекты на указанном экране, перейти на предыдущий
*&-------------------------------------------------------------------*
Form exit_screen
  using i_dynnr like sy-dynnr.

  Data: "Чтобы ловить исключительные ситуации
    lv_exc_text type string,
    lr_exception type ref to cx_root.

  Case i_dynnr.

    When gcs-screens-data_new-number.
      "Нет объектов для удаления

    When gcs-screens-data_change-number
      or gcs-screens-data_view-number.
      Try.
        Call method gs_alv-01-r_grid->free.
        Call method gs_alv-01-r_cont->free.
      Catch cx_root into lr_exception. "#EC CATCH_ALL
        Call method lr_exception->if_message~get_text
          receiving
            result = lv_exc_text.
        Message i000(SU) with 'Исключительная ситуация при вызове методов Free:' lv_exc_text.
      Endtry.
      Free: gs_alv-01-r_grid, gs_alv-01-r_cont, gs_alv-01-r_handler,
            gt_data, gs_alv-01-t_fcat, gs_alv-01-t_sort,
            gs_alv-01-s_layo, gs_alv-01-s_vari.

    When others.
      Message i000(SU) with 'Модуль exit_screen не обрабатывает экран' i_dynnr.
      Exit.

  Endcase.

  "Вернуться на предыдущий экран, с которого был вызван текущий
  Leave to screen 0.
Endform. "exit_screen

*&-------------------------------------------------------------------*
*&  Есть ли в таблице ZPM_USR полномочия на указанную операцию?
*&-------------------------------------------------------------------*
Form check_permission
  using
    i_program_name type progname
    i_user_name  type xubname
    i_operation type zpm_auth_operation
    i_all type zpm_auth_operation
  changing
    o_allowed type boolean.

  Data: ls_zpm_usr type ZPM_USR.

  Select single *
    from ZPM_USR
    into ls_zpm_usr
    where PROGNAME = i_program_name
      and UNAME = i_user_name
      and ( OPERATION = i_operation or OPERATION = i_all )
    .
  If sy-subrc <> 0.
    o_allowed = gc_false.
  Else.
    o_allowed = gc_true.
  Endif.
Endform. "check_permission

*&-------------------------------------------------------------------*
*&   Скрыть на текущем экране элементы управления, принадлежащие
*& указанной группе.
*&
*&  -> iv_group_name = название группы, элементы которой будут скрыты
*&-------------------------------------------------------------------*
Form hide_screen_element_group
  using iv_group_name type screen-group1.

  Loop at screen.
    If screen-group1 = iv_group_name.
      screen-active = 0.
    Endif.
    Modify screen.
  Endloop.
Endform. "hide_screen_element_group

*&-------------------------------------------------------------------*
*&   Заполнить внутреннюю таблицу данными из базы данных
*&
*& <-> ot_data = вн. таблица (источник задан константой — ZPMP001_1)
*& <-> ov_count = количество строк, выбранных из БД во вн. таблицу
*&-------------------------------------------------------------------*
Form get_data
  changing
    ot_data type ty_t_data
    ov_count type i.
  "Выбрать записи, перезаписав таблицу ot_data
  Select *
    from ZPMP001_1
    into corresponding fields of table ot_data
    where STORT in so1_strt
      and NAME in so1_name
      and MANUFACT_PLACE in so1_man1
      and MANUFACT_NAME in so1_man2
      and DATE_START in so1_date
      and PROJECT in so1_proj
      and TYPE in so2_type
      and VERSION_ORIGINAL in so2_vero
      and VERSION_MOD in so2_verm
      and DEV_ENVIRONMENT in so2_denv
      and MOD_CAUSE in so2_mcau
      and MOD_WORKER in so2_mwor
      and MOD_DATE in so2_mdat
      and NUM_OF_COPIES in so2_numc
      and COMMENTARY in so3_comm.
  ov_count = sy-dbcnt.
Endform. "get_data

*&-------------------------------------------------------------------*
*&   Подготовить набор объектов, необходимый для отображения ALV-грида
*& Структура грида заполняется из таблицы ZPMP001_1, которая задана
*& через глобальную константу gcs-data_table-table_name.
*&
*& <-> ot_fieldcat = структура грида (набор столбцов)
*& <-> ot_sort = правила сортировки
*& <-> os_layout = общие настройки внешнего вида
*& <-> os_variant = вариант внешнего вида, заданный по умолчанию
*&-------------------------------------------------------------------*
Form alv_1_prepare
  changing:
    ot_fieldcat type lvc_t_fcat
    ot_sort type lvc_t_sort
    os_layout type lvc_s_layo
    os_variant type disvariant.

  Data:
    ls_fcat type lvc_s_fcat,
    ls_sort type lvc_s_sort.

"Field catalog
  Call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      i_structure_name             = gcs-data_table-table_name
    changing
      ct_fieldcat                  = ot_fieldcat
    exceptions
      others                       = 1
            .
  If sy-subrc <> 0.
    Message e000(SU) with 'Ошибка при заполнении fieldcat для ALV на экране' sy-dynnr 'из таблицы' gcs-data_table-table_name.
    Exit.
  Endif.

  Loop at ot_fieldcat into ls_fcat.
  "Обработать все столбцы
    If ls_fcat-fieldname = gcs-data_table-key_mandt
    or ls_fcat-fieldname = gcs-data_table-key_unique_index.
    "Скрыть столбцы, чьи поля относятся к первичному ключу
      ls_fcat-no_out = gc_true.
    Else.
    "Показываемые столбцы сделать доступными для изменения содержимого
      ls_fcat-edit = gc_true.
    "Ещё нужно вызвать метод set_ready_for_input, что сделано в другом месте
    Endif.

    Modify ot_fieldcat from ls_fcat.
  Endloop.

"Sort
  ls_sort-spos = 1.
  ls_sort-fieldname = gcs-data_table-stort.
  ls_sort-down = gc_false.
  ls_sort-up = gc_true.
  Append ls_sort to ot_sort.

  ls_sort-spos = 2.
  ls_sort-fieldname = gcs-data_table-name.
  ls_sort-down = gc_false.
  ls_sort-up = gc_true.
  Append ls_sort to ot_sort.

"Layout
  os_layout-cwidth_opt = gc_true.

"Variant
  os_variant-report = sy-repid. "использовать вариант по умолчанию, если есть
Endform. "alv_1_prepare

*&-------------------------------------------------------------------*
*&   Показать/обновить грид типа 1 на текущем экране в контейнере
*& класса cl_gui_docking_container. Данные для грида — в ot_data.
*& Структура и внешний вид грида задаются подпрограммой alv_1_prepare
*& из таблицы ZPMP001_1, которая задана через глобальную константу
*& gcs-data_table-table_name.
*&
*&  -> iv_permission_for_save_all = разрешение сохранять формат грида
*&     и локально для пользователя, и глобально для всех пользователей
*& <-> ot_data = внутренняя таблица с данными из таблицы БД
*& <-> os_alv = набор объектов, необходимый для отображения ALV-грида
*&
*&-------------------------------------------------------------------*
Form alv_1_display
  using
    iv_permission_for_save_all type boolean
  changing
    ot_data type ty_t_data
    os_alv type ty_s_alv-01.

  Data: lv_save_mode like gcs-alv-variant_save_modes-all.

  If os_alv-r_grid is initial.
    Create object os_alv-r_cont
      exporting
        repid         = sy-repid
        dynnr         = sy-dynnr
        side          = cl_gui_docking_container=>dock_at_top
        extension     = cl_gui_docking_container=>ws_maximizebox
      exceptions
        others        = 1
        .
    If sy-subrc <> 0.
      Message e000(SU) with 'Не удалось создать экземпляр' 'docking-контейнера на экране' sy-dynnr.
      Exit.
    Endif.
    Create object os_alv-r_grid
      exporting
        i_parent          = os_alv-r_cont
      exceptions
        others            = 1
        .
    If sy-subrc <> 0.
      Message e000(SU) with 'Не удалось создать экземпляр ALV-Grid''а на экране' sy-dynnr.
      Exit.
    Endif.

    "Задать способ подтягивания изменений в таблице ALV-Grid'а
    Call method os_alv-r_grid->register_edit_event
      exporting
        i_event_id = cl_gui_alv_grid=>mc_evt_enter "Enter либо двойной щелчок
*        i_event_id = cl_gui_alv_grid=>mc_evt_modified "когда курсор покидает ячейку
      exceptions
        others     = 1
            .
    If sy-subrc <> 0.
      Message e000(SU) with 'Исключ. ситуация при вызове' 'os_alv-r_grid->register_edit_event'.
      Exit.
    Endif.

    Perform alv_1_prepare
      changing
        os_alv-t_fcat
        os_alv-t_sort
        os_alv-s_layo
        os_alv-s_vari.

    Create object os_alv-r_handler.
    Set handler os_alv-r_handler->handle_hotspot_click for os_alv-r_grid.
    Set handler os_alv-r_handler->handle_data_changed for os_alv-r_grid.

    If gc_true = iv_permission_for_save_all.
      lv_save_mode = gcs-alv-variant_save_modes-all.
    Else.
      lv_save_mode = gcs-alv-variant_save_modes-only_user.
    Endif.

    Call method os_alv-r_grid->set_table_for_first_display
      exporting
        is_layout                     = os_alv-s_layo
        is_variant                    = os_alv-s_vari
        i_save                        = lv_save_mode
      changing
        it_outtab                     = ot_data
        it_fieldcatalog               = os_alv-t_fcat
        it_sort                       = os_alv-t_sort
      exceptions
        others                        = 1
            .
    If sy-subrc <> 0.
      Message e000(SU) with 'Исключ. ситуация при вызове метода'
                            'os_alv-r_grid->set_table_for_first_display'
                            'на экране'
                            sy-dynnr.
      Exit.
    Endif.

  Else.
    Call method os_alv-r_grid->refresh_table_display
      exporting
        is_stable = gcs-alv-stable_refresh.
  Endif.
Endform. "alv_1_display

*&-------------------------------------------------------------------*
*&   Сохранить данные, введённые в ALV-грид. Сохраняемые строки находятся
*& через сравнение содержимого привязанной к ALV-гриду внутренней таблицы в
*& два момента: до и после вызова метода check_changed_data.
*&
*&   -> is_alv = структура объектов, относящихся к ALV-гриду
*&  <-> ot_data =  таблица, привязанная к ALV-гриду в методе
*&      set_table_for_first_display класса cl_gui_alv_grid
*&-------------------------------------------------------------------*
Form save_data
  using
    is_alv type ty_s_alv-01
  changing
    ot_data_before type ty_t_data
    ot_data type ty_t_data.

  Data:
    lt_del_rows type ZPMP001_1_TABLE_TYPE, "строки, которые были удалены после вызова
    lt_ins_rows type ty_t_data, "-//- вставлены
    lt_mod_rows type ty_t_data, "-//- изменены
    begin of ls_num_of,
      deleted type i,
      inserted type i,
      modified type i,
    end of ls_num_of.

  If ot_data_before is initial.
    Exit.
  Endif.

"Подтянуть текущее состояние ячеек ALV-грида в связанную с ним таблицу ot_data
  Call method is_alv-r_grid->check_changed_data
*    importing
*      e_valid   = "данные не проверяются на правильность ввода
*    changing
*      c_refresh = 'X'
      .

"Найти отличия между тем, что было в гриде до и после вызова check_changed_data
  "Обработать удалённые строки
    Perform subtract_set  "Из "До" вычесть "После"
      using ot_data_before
            ot_data
      changing lt_del_rows.
  "Обработать добавленные строки
    Perform subtract_set  "Из "После" вычесть "До"
      using ot_data
            ot_data_before
      changing lt_ins_rows.
  "Обработать изменённые строки
    Perform get_rows_with_mod_content
      using ot_data
            ot_data_before
      changing lt_mod_rows.

"Применить изменения к таблице ZPMP001_1
  Call function 'ZPMP001_1_DELETE'
    exporting
      it_records = lt_del_rows
    importing
      o_num_of_processed = ls_num_of-deleted
    exceptions
      db_error = 1.
  If sy-subrc <> 0.
    Message e000(su) with 'Ошибка при вызове ZPMP001_1_DELETE.'
                          'Содержимое таблицы ZPMP001_1 не изменено.'.
    Exit.
  Endif.
*  Call function 'ZPMP001_1_INSERT'
*    exporting
*      it_records = lt_ins_rows
*    importing
*      o_num_of_processed = ls_num_of-inserted
*    exceptions
*      db_error = 1
*      nums_not_equal = 2.
*  If sy-subrc <> 0.
*    Message e000(su) with 'Ошибка при вызове ZPMP001_1_INSERT.'
*                          'Содержимое таблицы ZPMP001_1 не изменено.'.
*    Exit.
*  Endif.
  Call function 'ZPMP001_1_MODIFY'
    exporting
      it_records = lt_mod_rows
    importing
      o_num_of_processed = ls_num_of-modified
    exceptions
      db_error = 1.
  If sy-subrc <> 0.
    Message e000(su) with 'Ошибка при вызове ZPMP001_1_MODIFY.'
                          'Содержимое таблицы ZPMP001_1 не изменено.'.
    Exit.
  Endif.

  Message i000(su) with 'Удалено/добавлено/изменено строк:'
                        ls_num_of-deleted
                        'N/A'"ls_num_of-inserted "нужно автоматически задавать unique_index
                        ls_num_of-modified.
  Move ot_data to ot_data_before. "Запомнить содержимое до изменений, 2 из 2
Endform. "save_data

*&-------------------------------------------------------------------*
*&   Вычесть из множества записей в первой таблице множество записей из
*& второй таблицы и выдать множество-разность. Записи сравнивать по ключевым
*& полям (MANDT, UNIQUE_INDEX), не сравнивать содержимое остальных полей.
*&
*&  -> it_minuend = уменьшаемое множество
*&  -> it_subtrahend = вычитаемое множество
*& <-> ot_difference = множество-разность
*&-------------------------------------------------------------------*
Form subtract_set
  using
    it_minuend type ty_t_data "уменьшаемое множество
    it_subtrahend type ty_t_data "вычитаемое множество
  changing
    ot_difference type ty_t_data. "множество-разность

  Data:
    ls_subtrahend type ty_s_data.

  Move it_minuend to ot_difference.
  Loop at it_subtrahend into ls_subtrahend.
    Delete ot_difference
      where mandt = ls_subtrahend-mandt
        and unique_index = ls_subtrahend-unique_index.
  Endloop.
Endform. "subtract_set

*&-------------------------------------------------------------------*
*&   Выдать те строки из первой входной таблицы, у которых ключевые поля
*& совпадают со строками из второй входной таблицы, а содержимое - не
*& совпадает.
*&
*&  -> it_set_1 = первая входная таблица
*&  -> it_set_2 = вторая входная таблица
*& <-> ot_rows_with_mod_content = искомые строки из первой входной таблицы
*&-------------------------------------------------------------------*
Form get_rows_with_mod_content
  using
    it_set_1 type ty_t_data
    it_set_2 type ty_t_data
  changing
    ot_rows_with_mod_content type ty_t_data.

  Data:
    ls_1 type ty_s_data,
    ls_2 type ty_s_data, "#EC NEEDED смотри Read table it_set_2 ниже
    lt_intersection type ty_t_data, "Пересечение по ключу
    ls_intersection type ty_s_data.

  Refresh ot_rows_with_mod_content.

  Loop at it_set_1 into ls_1.
    Read table it_set_2
      with key
        mandt = ls_1-mandt
        unique_index = ls_1-unique_index
      into ls_2.
    If sy-subrc = 0. "Пересечение
      Append ls_1 to lt_intersection. "содержимое из первой таблицы
    Endif.
  Endloop.

"Определены строки с совпадающими ключами из первой и второй входной таблицы

  Loop at lt_intersection into ls_intersection.
    Read table it_set_2
      with key table_line = ls_intersection
      into ls_2.
    If sy-subrc <> 0. "Содержимое из 2й таблицы отличается от содержимого 1й
      Append ls_intersection to ot_rows_with_mod_content.
    Endif.
  Endloop.

Endform. "get_rows_with_mod_content

*&-------------------------------------------------------------------*
*&   Подставить уникальный индекс в первую ячейку добавленных строк.
*& Проверить корректность введённых данных
*&-------------------------------------------------------------------*
Form alv_1_handle_data_changed
  using
    ir_data_changed type ref to cl_alv_changed_data_protocol
  changing
    ot_data type ty_t_data.

  Field-symbols:
    <ft_mod_rows> type ty_t_data,
    <fs_mod_row> type ty_s_data.
  Data: lt_mod_rows type ty_t_data,
        ls_mod_row  type ty_s_data,
        lv_index type ty_s_data-unique_index,
        lt_mod_cells type lvc_t_modi,
        ls_mod_cell type lvc_s_modi,
        lv_value type lvc_value.

"Подставить уникальный индекс
  Perform get_max_index changing lv_index.
  Assign ir_data_changed->mp_mod_rows->* to <ft_mod_rows>.
  Loop at <ft_mod_rows> assigning <fs_mod_row> where unique_index = 0.
    Add 1 to lv_index.
    <fs_mod_row>-unique_index = lv_index.
    <fs_mod_row>-mandt = sy-mandt.
  Endloop.

"Проверить правильность введённого местоположения
  Move ir_data_changed->mt_mod_cells to lt_mod_cells.
  Sort lt_mod_cells by row_id.

  Loop at lt_mod_cells
    into ls_mod_cell
    where fieldname = gcs-data_table-stort.

    Call method ir_data_changed->get_cell_value
      exporting
        i_row_id    = ls_mod_cell-row_id
        i_fieldname = gcs-data_table-stort
      importing
        e_value     = lv_value.
    "TODO "Проверить правильность введённого местоположения
    Call method ir_data_changed->add_protocol_entry
      exporting
        i_msgid = 'SU'
        i_msgno = '000'
        i_msgty = 'E'
        i_msgv1 = 'Тест'
        i_msgv2 = lv_value
        i_msgv3 = 'Местоположение сброшено на 13'
        i_fieldname = ls_mod_cell-fieldname
        i_row_id = ls_mod_cell-row_id.

    Call method ir_data_changed->modify_cell
      exporting
        i_row_id      = ls_mod_cell-row_id
        i_fieldname   = ls_mod_cell-fieldname
        i_value       = '13'.

  Endloop.

Endform. "alv_1_handle_data_changed

*&-------------------------------------------------------------------*
*&   Выбрать из таблицы ZPMP001_1 максимальное значение индекса
*&-------------------------------------------------------------------*
Form get_max_index
  changing
    ov_max_index type ZPMP001_1-UNIQUE_INDEX.

  Select max( UNIQUE_INDEX )
    into ov_max_index
    from ZPMP001_1.
  If sy-subrc <> 0.
    Message e000(su) with 'Ошибка в процедуре'
                          'get_max_index'.
  Endif.
Endform. "get_max_index