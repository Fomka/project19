--- Краткий текст
Вставить все переданные записи в ZPMP006_1 за один раз

--- Исходный код
FUNCTION ZPMP006_1_INSERT .
*"----------------------------------------------------------------------
*"*"Локальный интерфейс:
*"  IMPORTING
*"     REFERENCE(IV_DO_COMMIT) TYPE  BOOLEAN DEFAULT ' '
*"  EXPORTING
*"     REFERENCE(O_NUM_OF_PROCESSED) TYPE  I
*"  CHANGING
*"     REFERENCE(CT_RECORDS) TYPE  ZPMP006_1_TABLE_TYPE
*"  EXCEPTIONS
*"      MAX_INDEX_ERROR
*"      FOREIGN_LOCK_ERROR
*"      OTHER_LOCK_ERROR
*"      DB_ERROR
*"      NUMS_NOT_EQUAL
*"----------------------------------------------------------------------
  Data:
    lv_unique_index type zpmp006_1-unique_index,
    ls_record type zpmp006_1,
    lv_num_of_input_records type i, "количество вставляемых строк
    lr_error type ref to CX_ROOT.

"Вычислить начальное значение индекса для заполнения столбца UNIQUE_INDEX
  Select max( UNIQUE_INDEX )
    into lv_unique_index
    from ZPMP006_1.
  If sy-subrc <> 0.
    Raise max_index_error.
  Endif.
"Поставить мандант, уникальный индекс, дату/время/автора изменения
  Loop at ct_records into ls_record.
    ls_record-mandt = sy-mandt.
    Add 1 to lv_unique_index.
    ls_record-unique_index = lv_unique_index.
    ls_record-change_date = sy-datum.
    ls_record-change_time = sy-uzeit.
    ls_record-change_name = sy-uname.
    Modify ct_records from ls_record index sy-tabix.
  Endloop.
"Установить блокировку на все записи
  Loop at ct_records into ls_record.
    Call function 'ENQUEUE_EZPMP006_1'
      exporting
        mode_zpmp006_1       = gcs-lock-mode-exclusive
        mandt                = sy-mandt
        unique_index         = ls_record-unique_index
        x_unique_index       = gc_true
        _scope               = gcs-lock-scope-min
        _wait                = gc_false
        _collect             = gc_true "собрать в один пакет
              .
  Endloop.
  Call function 'FLUSH_ENQUEUE' "обработать собранный пакет
    exceptions
      foreign_lock         = 1
      system_failure       = 2
      others               = 3
            .
  Case sy-subrc.
    When 0.
    "Продолжить
    When 1.
      Raise foreign_lock_error.
    When others.
      Raise other_lock_error.
  Endcase.
"Вставить все переданные записи в ZPMP006_1 за один раз
  Try.
    Insert ZPMP006_1
      from table ct_records.
  Catch CX_SY_OPEN_SQL_DB into lr_error.
  "Если произошла ошибка, то отменить все изменения и выйти
    Rollback work.
    Raise DB_ERROR.
  Endtry.

  If sy-subrc <> 0.
  "Если произошла ошибка, то отменить все изменения и выйти
    Rollback work.
    Raise DB_ERROR.
  Else.
    o_num_of_processed = sy-dbcnt.
  Endif.

  Describe table ct_records lines lv_num_of_input_records.
  If lv_num_of_input_records <> o_num_of_processed.
  "Если произошла ошибка, то отменить все изменения и выйти
    Rollback work.
    Raise NUMS_NOT_EQUAL.
  Endif.

  "Успешно вставлены все записи — подтвердить все изменения
  If iv_do_commit = gc_true.
    Commit work and wait.
  Endif.

"Снять блокировку со всех записей
  Loop at ct_records into ls_record.
    Call function 'DEQUEUE_EZPMP006_1'
      exporting
        mode_zpmp006_1       = gcs-lock-mode-exclusive
        mandt                = sy-mandt
        unique_index         = ls_record-unique_index
        x_unique_index       = gc_true
        _scope               = gcs-lock-scope-min
        _collect             = gc_true "собрать в один пакет
              .
  Endloop.
  Call function 'FLUSH_ENQUEUE'  "обработать собранный пакет
    exceptions
      foreign_lock         = 1
      system_failure       = 2
      others               = 3
            .
  If sy-subrc <> 0.
    Raise other_lock_error.
  Endif.
Endfunction.